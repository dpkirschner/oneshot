# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/
*.xcuserstate
*.xcuserdata/

## Compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## Compatibility with Xcode 9 (ignoring not required starting Xcode 10)
*.xcuserstate

## Xcode Patch
*.xcodeproj/*
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/
!*.xcodeproj/project.xcworkspace/
*.xcodeproj/project.xcworkspace/xcuserdata/

## Xcode Workspace
*.xcworkspace/xcuserdata/

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
Packages/
Package.pins
Package.resolved
*.xcodeproj/
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
.swiftpm/
.package.resolved

# Swift Package Manager build artifacts and caches
/.build/
.build/
/build/
build/
.swiftpm/xcode/
.swiftpm/configuration/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# OneShot specific
#
# Local configuration files
.claude/settings.local.json

# Build artifacts
.build/
build/
DerivedData/
*.dSYM.zip
*.dSYM

# Xcode build artifacts
xcuserdata/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

# Core Data
*.sqlite
*.sqlite-shm
*.sqlite-wal

# API Keys and secrets (should never be committed)
*.pem
*.p12
*.mobileprovision
secrets.json
config.json
.env
.env.local
.env.production

# Logs
*.log
logs/
Logs/

# Cache directories
cache/
Cache/
.cache/

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# IDE files
.vscode/
.idea/
*.sublime-*

# Documentation build
docs/_build/
docs/build/

# Test results
TestResults/
*.junit
coverage/
*.coverage

# Archives
*.zip
*.tar.gz
*.rar

# Application data (for development)
Application Support/OneShot/
Library/Application Support/OneShot/
~/Library/Application Support/OneShot/

# Backup files
*.bak
*.backup
*.old

# Large binary files and media
*.mov
*.mp4
*.avi
*.mkv
*.dmg
*.pkg
*.zip
*.tar.gz
*.rar
*.7z

# macOS Simulator files
**/iOS Simulator/
**/iPhone Simulator/

# Thumbnails and previews
Thumbs.db
ehthumbs.db

# Swift Playgrounds
timeline.xctimeline
playground.xcworkspace

# Firebase
GoogleService-Info.plist
google-services.json

# Profile and performance data
*.trace
*.dtps
*.dSYM/

# Distribution
*.ipa
*.app.zip
*.pkg
*.dmg

# Keychain exports (never commit these)
*.keychain
*.p12
